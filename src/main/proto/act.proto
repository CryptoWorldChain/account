syntax = "proto3";

package org.brewchain.account.gens;

enum PACTModule {
	ACT = 0; // 账户，合约，合约代码
};
enum PACTCommand {
    CAC = 0; // 保存账户，合约
    GAC = 1; // 获取账户，合约
    UAC = 2; // 创建多重签名账户
}
message ReqCreateAccount {
    string address = 1;
    string pubKey = 2;
}

message RespCreateAccount {
    int32 retCode = 1;
}

message ReqCreateUnionAccount {
    string address = 1;
    int64 max = 2;
    int64 acceptMax = 3;
    int32 acceptLimit = 4;
    repeated string relAddress = 5;
    repeated string signature = 6;
    repeated string pubKey = 7;
}

message RespCreateUnionAccount {
    int32 retCode = 1;
}

message ReqGetAccount {
    string address = 1;
}

message RespGetAccount {
    Account account = 1;
    int32 retCode = 2;
}

message ReqCreateContract {
    Contract contract = 1;
}

message RespCreateContract {
    int32 retCode = 1;
}

message Account {
    bytes address = 1;
    AccountValue value = 2;
}

message AccountValue {
    int32 nonce = 1;
    int64 balance = 2;
    bytes pubKey = 3;
    int64 max = 4;
    int64 acceptMax = 5;
    int32 acceptLimit = 6;
    repeated bytes address = 7;
    repeated AccountTokenValue tokens = 8;
    repeated AccountCryptoValue cryptos = 9;
}

message AccountTokenValue {
    string token = 1;
    int64 balance = 2;
}

message AccountCryptoValue {
    string symbol = 1; // 用于分类ERC721 Token的标记
    repeated AccountCryptoToken tokens = 2;
}

message AccountCryptoToken {
    bytes hash = 1; // Token的hash，hash(index,total,code,name,timestamp)
    int64 timestamp = 2; // Token创建时间
    int32 index = 3; // 该Token发行时的索引
    int32 total = 4; // 该Token的发行总数量
    string code = 5; // Token的编号
    string name = 6; // Token的名称
    bytes owner = 7; // 所有人的账户地址
    int32 nonce = 8; // 交易次数
}

message Contract {
    bytes address = 1;
    int32 nonce = 2;
    int64 balance = 3;
    bytes storage = 4;
    bytes codeHash = 5;
    bytes code = 6;
}

// 统计
// ERC 721 - 账户接口
//  加/减/获取
// ERC 721 - CWV购买交易